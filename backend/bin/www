/**
 * Module dependencies.
 */
const {app, server} = require('../app');
const debug = require('debug')('jobify:server');
const http = require('http');
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
process.on('unhandledRejection', onRejection);
process.on('uncaughtException', onException);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      __logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      __logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
/**
 * Event listener for unhandledexceptions
 */
function onException(err) {
  __logger.error('UNCAUGHT EXCEPTION! Shutting down...');
  __logger.error(err.name, err.message);
  process.exit(1);
}
/**
 * Event listener for unhandledRejection
 */
function onRejection() {
  __logger.error('UNHANDLED REJECTION! Shutting down...');
  __logger.error(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
}
